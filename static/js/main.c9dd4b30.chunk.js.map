{"version":3,"sources":["components/square.js","components/board.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","Button","variant","className","flag","onClick","value","Board","map","x","key","y","test","winner","includes","squares","Game","state","history","Array","fill","xrow","ycol","computer","stepNumber","reverse","xIsNext","i","this","slice","length","calculateWinner","setState","concat","Math","floor","step","move","current","count","check","spot","random","handleClick","moves","desc","bold","jumpTo","generateLocation","sort","a","b","status","winnerlist","squareCount","basicOpponent","toggle","size","reverseOrder","resetHum","gameReset","resetOpp","gameResetAi","Component","lines","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9dd4b30.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function Square(props) {\r\n  return (\r\n    <Button variant=\"outline-info\" className={props.flag} onClick={props.onClick}>\r\n      {props.value}\r\n    </Button>\r\n  )\r\n} ","import React from 'react';\r\nimport Square from './square.js';\r\n\r\nexport default function Board(props) {\r\n  return (\r\n    <div className=\"game-board\">\r\n      {[0, 1, 2].map(x => (\r\n        <div key={x} className=\"board-row\">\r\n          {[0, 1, 2].map(y => {\r\n            const test = (props.winner && props.winner.includes((3 * x + y))) ? \"winning-square\" : \"square\"\r\n            return (\r\n              <Square\r\n                key={3 * x + y}\r\n                value={props.squares[3 * x + y]}\r\n                flag={test}\r\n                onClick={() => props.onClick(3 * x + y)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport Board from './board.js';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          xrow: null,\r\n          ycol: null,\r\n        },\r\n      ],\r\n      computer: false,\r\n      stepNumber: 0,\r\n      reverse: false,\r\n      xIsNext: true,\r\n      // (Math.floor((Math.random() * 2) + 1) === 1) ? false : true - If i want to try to randomize who starts\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return 0;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          ycol: i % 3,\r\n          xrow: Math.floor(i / 3),\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n\r\n    return 1;\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  generateLocation(move) {\r\n    const history = this.state.history;\r\n    const current = history[move];\r\n    const loc = \"(\" + current.ycol + \",\" + current.xrow + \")\";\r\n    return loc;\r\n  }\r\n\r\n  reverseOrder() {\r\n    this.setState({\r\n      reverse: !this.state.reverse,\r\n    });\r\n  }\r\n\r\n  squareCount(squares) {\r\n    let count = 0;\r\n    let i;\r\n    for (i = 0; i < 9; i++) {\r\n      if (squares[i]) {\r\n        count += 1;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  gameReset() {\r\n    this.setState({\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          xrow: null,\r\n          ycol: null,\r\n        },\r\n      ],\r\n      computer: false,\r\n      stepNumber: 0,\r\n      reverse: false,\r\n      xIsNext: true,\r\n    });\r\n  }\r\n\r\n  gameResetAi() {\r\n    this.setState({\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          xrow: null,\r\n          ycol: null,\r\n        },\r\n      ],\r\n      computer: true,\r\n      stepNumber: 0,\r\n      reverse: false,\r\n      xIsNext: true,\r\n    });\r\n  }\r\n\r\n  basicOpponent() {\r\n    let check = 0;\r\n    while (!check) {\r\n      const spot = Math.floor(Math.random() * 9);\r\n      check = this.handleClick(spot);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n\r\n    const moves = history.map((step, move) => {\r\n      let desc;\r\n      const bold = move === this.state.stepNumber ? \"bold\" : \"history\";\r\n\r\n      if (move === 0) {\r\n        desc = \"Go to game start\";\r\n        return (\r\n          <li key={move}>\r\n            <Button variant=\"outline-info\" className={bold} onClick={() => this.jumpTo(move)}>\r\n              {desc}\r\n            </Button>\r\n          </li>\r\n        );\r\n      }\r\n\r\n      desc = move % 2 === 1\r\n        ? \"Move # \" + move + \", Player One Move: \" + this.generateLocation(move)\r\n        : \"Move # \" + move + \", Player Two Move: \" + this.generateLocation(move);\r\n\r\n      return (\r\n        <li key={move}>\r\n          <Button variant=\"outline-info\" className={bold} onClick={() => this.jumpTo(move)}>\r\n            {desc}\r\n          </Button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if (this.state.reverse) {\r\n      moves.sort(function (a, b) {\r\n        return b.key - a.key;\r\n      });\r\n    }\r\n\r\n    const winner = calculateWinner(current.squares);\r\n    let status;\r\n    let winnerlist;\r\n    \r\n    if (winner) {\r\n      status = \"Winner: \" + winner[0];\r\n      winnerlist = winner[1];\r\n    } else if (this.squareCount(current.squares) === 9) {\r\n      status = \"No one won, its a tie\";\r\n      winnerlist = null;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      if (this.state.stepNumber % 2 === 1 && this.state.computer) {\r\n        this.basicOpponent();\r\n      }\r\n      winnerlist = null;\r\n    }\r\n\r\n    const toggle = (<Button variant=\"secondary\" size=\"lg\" onClick={() => this.reverseOrder()} > Change Move Order </Button>);\r\n    const resetHum = (<Button variant=\"secondary\" size=\"lg\" onClick={() => this.gameReset()}> New game with Human </Button>);\r\n    const resetOpp = (< Button variant=\"secondary\" size=\"lg\" onClick={() => this.gameResetAi()}> New game with Computer </Button >);\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-area\">\r\n          <div className=\"game-status\">{status}</div>\r\n          <Board squares={current.squares} onClick={(i) => this.handleClick(i)} winner={winnerlist}/>\r\n          <div className=\"game-reset\">\r\n            {resetHum} {resetOpp}\r\n          </div>\r\n        </div>\r\n        <div className=\"game-moves\">\r\n          <div className=\"move-header\">Game Moves</div>\r\n          <nav>\r\n            <ul className=\"moves\">{moves}</ul>\r\n          </nav>\r\n          <div className=\"toggle\">{toggle}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [squares[a], lines[i]];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction sleep(milliseconds) {\r\n  const date = Date.now();\r\n  let currentDate = null;\r\n  do {\r\n    currentDate = Date.now();\r\n  } while (currentDate - date < milliseconds);\r\n}","import React from 'react';\r\nimport Game from './components/game.js'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Game />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}